version: v0.2.3
policyRules:
- name: maint-tools-access
  precondition:
  - /sbin/*
  - OPTSCAN
  description:
    refs:
    - name: MITRE-TTP
      url:
      - https://attack.mitre.org/techniques/T1553/
    tldr: Restrict access to maintenance tools (apk, mii-tool, ...)
    detailed: Container images might contain maintenance tools which should ideally
      never be used in prod env, or if used, should be used only in certain time frames.
      Examples include, dynamic package management tools, mii-tool, iptables etc
  yaml: ksp-audit-maintenance-tool-access.yaml
- name: trusted-cert-mod
  precondition: 
  - /etc/ssl/.*
  - OPTSCAN
  description:
    refs:
    - name: MITRE-TTP
      url:
      - https://attack.mitre.org/techniques/T1553/
      - https://fight.mitre.org/techniques/FGT1555
    tldr: Restrict access to trusted certificated bundles in the OS image
    detailed: Operating systems maintain a list of trusted certificates (often called
      trust bundles) in file system. These bundles decides which authorities are trusted.
      Subverting these trust controls would essentially allow an adversary to operate
      as a trusted entity. Adversaries may undermine security controls that will either
      warn users of untrusted activity or prevent execution of untrusted programs.
      Operating systems and security products may contain mechanisms to identify programs
      or websites as possessing some level of trust. Examples of such features would
      include a program being allowed to run because it is signed by a valid code
      signing certificate, a program prompting the user with a warning because it
      has an attribute set from being downloaded from the Internet, or getting an
      indication that you are about to connect to an untrusted site.
  yaml: ksp-unsecured_credentials_access.yaml
- name: system-owner-discovery
  precondition: 
  - /usr/bin/who
  - OPTSCAN
  description:
    refs:
    - name: MITRE-TTP-T1082
      url:
      - https://attack.mitre.org/techniques/T1082/
    tldr: System Information Discovery - block system owner discovery commands
    detailed: An adversary may attempt to get detailed information about the operating system and hardware, including
      version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System
      Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the
      adversary fully infects the target and/or attempts specific actions.
  yaml: ksp-mitre-system-owner-user-discovery.yaml
- name: write-under-bin-dir
  precondition: 
  - /bin/*
  - OPTSCAN
  description:
    refs:
    - name: NIST-SI-4
      url:
      - https://csf.tools/reference/nist-sp-800-53/r5/si/si-4/
    tldr: System and Information Integrity - System Monitoring make directory under /bin/
    detailed: System monitoring includes external and internal monitoring. External monitoring
      includes the observation of events occurring at system boundaries. Internal monitoring
      includes the observation of events occurring within the system. Organizations monitor systems,
      for example, by observing audit activities in real time or by observing other system aspects 
      such as access patterns, characteristics of access, and other actions.
  yaml: ksp-nist-si-4-mkdir-bin-dir.yaml
- name: write-under-dev-dir
  precondition: 
  - /dev/*
  - OPTSCAN
  description:
    refs:
    - name: NIST-SI-4
      url:
      - https://csf.tools/reference/nist-sp-800-53/r5/si/si-4/
    tldr: System and Information Integrity - System Monitoring make files under /dev/
    detailed: System monitoring includes external and internal monitoring. External monitoring
      includes the observation of events occurring at system boundaries. Internal monitoring
      includes the observation of events occurring within the system. Organizations monitor systems,
      for example, by observing audit activities in real time or by observing other system aspects 
      such as access patterns, characteristics of access, and other actions.
  yaml: ksp-nist-si-4-create-file-in-dev-dir.yaml
- name: cronjob-cfg
  precondition: 
  - /var/cron/*
  - OPTSCAN
  description:
    refs:
    - name: NIST-SI-4
      url:
      - https://csf.tools/reference/nist-sp-800-53/r5/si/si-4/
    tldr: System and Information Integrity - System Monitoring Detect access to cronjob files
    detailed: System monitoring includes external and internal monitoring. External monitoring
      includes the observation of events occurring at system boundaries. Internal monitoring
      includes the observation of events occurring within the system. Organizations monitor systems,
      for example, by observing audit activities in real time or by observing other system aspects 
      such as access patterns, characteristics of access, and other actions.
  yaml: ksp-nist-si-4-detect-access-to-cron-job-files.yaml
- name: pkg-mngr-exec
  precondition: 
  - /bin/*
  - OPTSCAN
  description:
    refs:
    - name: NIST-CM-7-5
      url:
      - https://csf.tools/reference/nist-sp-800-53/r5/cm/cm-7/cm-7-5/
    tldr: System and Information Integrity - Least Functionality deny execution of package manager process in container
    detailed: Authorized software programs can be limited to specific versions or from a specific source. To facilitate
      a comprehensive authorized software process and increase the strength of protection for attacks that bypass
      application level authorized software, software programs may be decomposed into and monitored at different 
      levels of detail. These levels include applications, application programming interfaces, application modules,
      scripts, system processes, system services, kernel functions, registries, drivers, and dynamic link libraries. 
  yaml: ksp-nist-si-4-execute-package-management-process-in-container.yaml
- name: k8s-client-tool-exec
  precondition: 
  - /usr/local/bin/kubectl
  - OPTSCAN
  description:
    refs:
    - name: MITRE_T1609_container_administration_command
      url:
      - https://attack.mitre.org/techniques/T1609/
    tldr: Adversaries may abuse a container administration service to execute commands within a container.
    detailed: Adversaries may abuse a container administration service to execute commands within a container. A container administration service such as the Docker daemon, the Kubernetes API server, or the kubelet may allow remote management of containers within an environment.
  yaml: ksp-deny-k8s-client-tool-execution-inside container.yaml
- name: remote-file-copy
  precondition: 
  - /usr/bin/rsync
  - OPTSCAN
  description:
    refs:
    - name: MITRE_TA0010_exfiltration
      url:
      - https://attack.mitre.org/tactics/TA0010/
    tldr: The adversary is trying to steal data.
    detailed: Exfiltration consists of techniques that adversaries may use to steal data from your network. Once they’ve collected data, adversaries often package it to avoid detection while removing it. This can include compression and encryption. Techniques for getting data out of a target network typically include transferring it over their command and control channel or an alternate channel and may also include putting size limits on the transmission.
  yaml: ksp-deny-remote-file-copy.yaml
- name: write-in-shm-dir
  precondition: 
  - /dev/shm*
  - OPTSCAN
  description:
    refs:
    - name: MITRE_execution
      url:
      - https://attack.mitre.org/tactics/TA0002/
    tldr: The adversary is trying to write under shm folder
    detailed: The adversary is trying to run malicious code. Execution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data.
  yaml: ksp-deny-write-in-shm-folder.yaml
- name: write-etc-dir
  precondition: 
  - /etc*
  - OPTSCAN
  description:
    refs:
    - name: MITRE_TA0005_defense_evasion
      url:
      - https://attack.mitre.org/tactics/TA0005/
    tldr: The adversary is trying to avoid being detected.
    detailed: Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.
  yaml: ksp-deny-write-under-etc-directory.yaml
# - name: shell-history-mod
#   precondition: 
#   - /root/*_history
#   - OPTSCAN
#   description:
#     refs:
#     - name: MITRE_T1070_indicator_removal
#       url:
#       - https://attack.mitre.org/techniques/T1070/
#     tldr: Adversaries may delete or modify artifacts generated within systems to remove evidence.
#     detailed: Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary’s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform. Removal of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.
#   yaml: ksp-shell-history-modification.yaml
- name: file-system-mounts
  precondition: 
  - /bin/mount
  description:
    refs:
    - name: CIS_4.1.14_file_system_mount
      url:
      - https://www.cisecurity.org/cis-benchmarks/
    tldr: Ensure successful file system mounts are collected
    detailed: It is highly unusual for a non privileged user to mount file systems to the system. While
      tracking mount commands gives the system administrator evidence that external media
      may have been mounted (based on a review of the source of the mount and confirming it's
      an external media type), it does not conclusively indicate that data was exported to the
      media. System administrators who wish to determine if data were exported, would also
      have to track successful open , create and truncate system calls requiring write access to a
      file under the mount point of the external media file system. This could give a fair
      indication that a write occurred. The only way to truly prove it, would be to track
      successful writes to the external media. Tracking write system calls could quickly fill up the
      audit log and is not recommended. Recommendations on configuration options to track
      data export to media is beyond the scope of this document.
  yaml: ksp-cis-audit-file-system-mounts.yaml
- name: cis-commandline-warning-banner
  precondition: 
  - /etc/motd
  description:
    refs:
    - name: CIS_1.7.1_Command_Line_Warning_Banners
      url:
      - https://www.cisecurity.org/cis-benchmarks/
    tldr: Command Line Warning Banners
    detailed: If the file does not have the correct ownership it could be modified by
      unauthorized users with incorrect or misleading information.
  yaml: ksp-cis-commandline-warning-banner.yaml
- name: access-ctrl-permission-mod
  precondition: 
  - /bin/chmod
  description:
    refs:
    - name: CIS_4.1.11_system_access_control_permission
      url:
      - https://www.cisecurity.org/cis-benchmarks/
    tldr: Ensure discretionary access control permission modification events are collected
    detailed: Monitor changes to file permissions, attributes, ownership and group. The parameters in
      this section track changes for system calls that affect file permissions and attributes. The
      chmod , fchmod and fchmodat system calls affect the permissions associated with a file. The
      chown , fchown , fchownat and lchown system calls affect owner and group attributes on a
      file. The setxattr , lsetxattr , fsetxattr (set extended file attributes) and removexattr ,
      lremovexattr , fremovexattr (remove extended file attributes) control extended file
      attributes. In all cases, an audit record will only be written for non-system user ids (auid >=
      500) and will ignore Daemon events (auid = 4294967295). All audit records will be tagged
      with the identifier "perm_mod." Monitoring for changes in file attributes could alert a system administrator to
      activity that could indicate intruder activity or policy violation.
  yaml: ksp-cis-deny-access-control-permission-modification.yaml
- name: sys-admin-scope-mod
  precondition: 
  - /etc/sudoers
  description:
    refs:
    - name: CIS_4.1.16_system_administration_scope
      url:
      - https://www.cisecurity.org/cis-benchmarks/
    tldr: Ensure changes to system administration scope (sudoers) is collected
    detailed: Monitor scope changes for system administrations. If the system has been properly
      configured to force system administrators to log in as themselves first and then use the
      sudo command to execute privileged commands, it is possible to monitor changes in scope.
      The file /etc/sudoers will be written to when the file or its attributes have changed. The
      audit records will be tagged with the identifier "scope." Changes in the /etc/sudoers file can indicate that an
      unauthorized change has been made to scope of system administrator activity.
  yaml: ksp-cis-deny-changes-to-system-administration-scope.yaml
- name: system-files-mod
  precondition: 
  - /etc/sudoers
  description:
    refs:
    - name: CIS_6.1_System_File_Permissions
      url:
      - https://www.cisecurity.org/cis-benchmarks/
    tldr: System File Permissions
    detailed: The /etc/ folder contains sensitive information that is used by many system
      utilities and therefore must be readable for these utilities to operate. It is critical to ensure that it is
      protected from unauthorized write access. Although it is protected by default, the file permissions could be changed
      either inadvertently or through malicious actions.
  yaml: ksp-cis-deny-modification-of-system-files.yaml
- name: system-mandatory-access-ctrl-mod
  precondition: 
  - /etc/selinux/
  description:
    refs:
    - name: CIS_4.1.8_system_mandatory_access_controls
      url:
      - https://www.cisecurity.org/cis-benchmarks/
    tldr: Ensure events that modify the system's Mandatory Access Controls are collected
    detailed: Monitor SELinux/AppArmor mandatory access controls. The parameters below monitor 
      any write access (potential additional, deletion or modification of files in the directory) or
      attribute changes to the /etc/selinux or /etc/apparmor and /etc/apparmor.d directories. Changes to files in these
      directories could indicate that an unauthorized user is attempting to modify access controls and change security
      contexts, leading to a compromise of the system.
  yaml: ksp-cis-deny-modification-to-system-mandatory-access-controls.yaml
- name: system-network-env-mod
  precondition: 
  - /etc/issue
  description:
    refs:
    - name: CIS_4.1.7_system_network_environment
      url:
      - https://www.cisecurity.org/cis-benchmarks/
    tldr: Ensure events that modify the system's network environment are collected
    detailed: Record changes to network environment files or system calls. The below parameters
      monitor the sethostname (set the systems host name) or setdomainname (set the systems
      domainname) system calls, and write an audit event on system call exit. The other
      parameters monitor the /etc/issue and /etc/issue.net files (messages displayed pre-
      login), /etc/hosts (file containing host names and associated IP addresses) and
      /etc/sysconfig/network (directory containing network interface scripts and configurations) files.
  yaml: ksp-cis-deny-modification-to-system-network-env.yaml
- name: service-clients-exec
  precondition: 
  - /usr/bin/telnet
  description:
    refs:
    - name: CIS_2.3_Service_Clients
      url:
      - https://www.cisecurity.org/cis-benchmarks/
    tldr: Service Clients
    detailed: A number of insecure services exist. While disabling the servers prevents a local attack
      against these services, it is advised to remove their clients unless they are required. The insecure services makes
      it possible for users to send and receive messages across systems through a terminal session.
  yaml: ksp-cis-deny-service-clients.yaml
- name: file-integrity-monitoring
  precondition: 
  - /bin/
  - OPTSCAN
  description:
    refs:
    - name: MITRE_T1565_data_manipulation
      url:
      - https://attack.mitre.org/techniques/T1565/
    tldr: File Integrity Monitoring
    detailed: Adversaries may insert, delete, or manipulate data in order to influence external outcomes or hide
      activity, thus threatening the integrity of the data. By manipulating data, adversaries may attempt to affect a
      business process, organizational understanding, or decision making.
      The type of modification and the impact it will have depends on the target application and process as well as
      the goals and objectives of the adversary. For complex systems, an adversary would likely need special
      expertise and possibly access to specialized software related to the system that would typically be gained
      through a prolonged information gathering campaign in order to have the desired impact.
  yaml: ksp-file-integrity-monitoring.yaml
- name: impair-defense
  precondition: 
  - /etc/*
  - OPTSCAN
  description:
    refs:
    - name: tactic-impair-defense
      url:
      - https://fight.mitre.org/techniques/FGT1562
    tldr: Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms.
    detailed: Adversaries may maliciously modify components of a victim environment in order to hinder or 
      disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls 
      and anti-virus, but also detection capabilities that defenders can use to audit activity and identify 
      malicious behavior. This may also span both native defenses as well as supplemental capabilities installed 
      by users and administrators.
  yaml: ksp-mitre-tactic-impair-defense.yaml
- name: network-service-scanning
  precondition: 
  - /bin/*
  - OPTSCAN
  description:
    refs:
    - name: tactic-network-service-scanning
      url:
      - https://fight.mitre.org/techniques/FGT1046
    tldr: Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation.
    detailed: Adversaries may attempt to get a listing of services running on remote hosts and local 
      network infrastructure devices, including those that may be vulnerable to remote software exploitation. 
      Common methods to acquire this information include port and/or vulnerability scans using tools that are
      brought onto a system.
  yaml: ksp-network-service-scanning.yaml
- name: remote-services
  precondition: 
  - /var/*
  - OPTSCAN
  description:
    refs:
    - name: tactic-remote-services
      url:
      - https://fight.mitre.org/techniques/FGT1021
    tldr: Adversaries may use Valid Accounts to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC.
    detailed: Legitimate applications (such as Software Deployment Tools and other administrative programs) 
      may utilize Remote Services to access remote hosts. For example, Apple Remote Desktop (ARD) on macOS 
      is native software used for remote management. ARD leverages a blend of protocols, including VNC to 
      send the screen and control buffers and SSH for secure file transfer.
  yaml: ksp-mitre-remote-services.yaml
- name: crypto-miners
  precondition: 
  - /bin/*
  - OPTSCAN
  description:
    refs:
    - name: MITRE_T1496_resource_hijacking
      url:
      - https://attack.mitre.org/techniques/T1496/
    tldr: Adversaries may leverage the resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability.
    detailed: One common purpose for Resource Hijacking is to validate transactions of cryptocurrency networks and earn virtual currency. Adversaries may consume enough system resources to negatively impact and/or cause affected machines to become unresponsive. Servers and cloud-based systems are common targets because of the high potential for available resources.
  yaml: ksp-prevent-crypto-miners.yaml